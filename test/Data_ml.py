import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
# from sklearn.model_selection import train_test_split
# from sklearn.model_selection import cross_val_score


drawer1 = np.array([[-9.296, -7.2824, -7.2824, -8.693, -8.693, -8.693, -8.359, -8.359, -8.359, -6.484, -6.484, -6.484, -6.484, -7.263, -7.263, -7.263, -7.263, -4.975, -4.975, -4.975, -4.975],
                    [-0.0041, 1.203, 1.203, -0.003, -0.003, -0.003, -1.988, -1.988, -1.988, -5.501, -5.501, -5.501, -5.501, -7.390, -7.390, -7.390, -7.390, -10.894, -10.894, -10.894, -10.894]])

drawer2 = np.array([[-10.216, -10.102, -10.102, -9.203, -9.203, -7.1, -7.1, -8.704, -8.704, -6.203, -6.203, -6.8, -6.8, -6.302, -6.302, -6.302, -4.403, -4.403, -6.501, -6.501, -6.501],
                    [0.581, -0.279, -0.279, -1.793, -1.793, -2.293, -2.293, -5.694, -5.694, -6.497, -6.497, -9.499, -9.499, -11.898, -11.898, -11.898, -13.098, -13.098, -13.699, -13.699, -13.699]])

drawer3 = np.array([[-11.094, -10.599, -9.298, -9.298, -10.5, -8.8, -8.8, -9.695, -7.3, -7.3, -7.904, -7.904, -1.103, -1.103, -6.495, -6.591, -6.591, -3.501, -3.501, -2.785, -2.785],
                    [0.504, -1.497, -1.995, -1.995, -2.2897, -4.098, -4.098, -5.499, -6.799, -6.799, -8.595, -8.595, -8.299, -8.299, -11.702, -13.603, -13.603, -12.799, -12.799, -12.001, -12.001]])

drawer4 = np.array([[-7.602, -7.602, -7.602, -10.599, -10.599, -10.599, -10.599, -8.397, -8.397, -8.397, -8.397, -5.496, -5.496, -5.496, -5.496, -5.496, -5.496, -4.317, -4.317, -3.037],
                    [0.698, 0.698, 0.698, -3.305, -3.305, -3.305, -3.305, -6.504, -6.504, -6.504, -6.504, -8.202, -8.202, -8.202, -7.602, -7.602, -7.602, -9.114, -9.114, -11.795]])

drawer5 = np.array([[-12.3, -12.3, -12.3, -12.3, -11.3, -11.704, -11.704, -7.6, -11.2, -11.2, -4.2, -4.2],
                    [-0.198, -2.098, -2.098, -2.799, -3.294, -4.99, -4.99, -4.598, -8.099, -8.099, -6.99, -6.99]])

drawer6 = np.array([[-12.893, -12.402, -12.402, -12.901, -12.901, -10.5, -8.5, -10.5, -10.5, -9.199, -9.199, -7.603, -7.603, -9.899, -9.899, -7.909, -7.909, -9.004, -9.004, -9.004, -13.702],
                    [-0.367, -2.282, -2.282, -3.193, -3.095, -3.095, -3.998, -7.098, -7.098, -8.298, -8.298, -9.196, -9.196, -12, -12, -10.094, -10.094, -11.697, -11.697, -11.697, -9.295]])

drawer7 = np.array([[-15.297, -13.295, -10.194, -10.194, -11.694, -11.694, -12.492, -12.492, -12.492, -12.589, -12.589, -10.661, -10.661, -9.760, -9.760, -9.760, -12.084, -12.084, -12.084, -10.158, -10.158, -10.158, -10.158, -13.716],
                    [-4.500, -4.104, -4.403, -4.403, -6.192, -6.192, -7.898, -7.898, -7.898, -9.800, -9.800, -11.613, -11.613, -13.792, -13.792, -13.792, -12.892, -12.892, -12.892, -13.392, -13.392, -13.392, -13.392, -4.497]])

drawer8 = np.array([[-15.705525203979079, -14.636153894823003, -14.636153894823003, -14.303216396891647, -13.898346804889329, -13.389438018710242, -13.389438018710242, -10.089293163058471, -13.384479085652233, -13.384479085652233, -11.505177391170543, -11.505177391170543, -12.599399846487136, -9.792103190818514, -9.792103190818514, -9.377609156598062, -9.377609156598062, -12.86528219576785, -12.86528219576785, -4.471991186823295, -4.471991186823295, -5.013712016672915, -5.013712016672915, -5.013712016672915], [-4.698980530006974, -4.506477451584748, -4.506477451584748, -5.602427217458031, -6.800784242189523, -8.100645659544083, -8.100645659544083, -8.001828270951451, -10.202916401082438, -10.202916401082438, -11.999016916808424, -11.999016916808424, -12.801580575562063, -13.199675028227594, -13.199675028227594, -13.00311203896006, -13.00311203896006, -14.39784079388501, -14.39784079388501, -13.799814125830059, -13.799814125830059, -12.808594683891497, -12.808594683891497, -12.808594683891497]])

drawer9 = np.array([[-17.003696072094154, -14.403428510483263, -12.907086492920532, -14.601983204033967, -14.601983204033967, -13.317260193701818, -13.409675609333778, -13.409675609333778, -9.4084724413912, -13.297433381879703, -13.297433381879703, -15.18832869144523], [-5.296873780385941, -4.899100454257142, -5.100763709935255, -6.902745555267768, -6.902745555267768, -7.796365853497411, -9.00205150871069, -9.00205150871069, -9.297857637397925, -11.601898394971563, -11.601898394971563, -13.098283932436939]]) #Drawer force when objects were placed inside. Stops before fully open.

drawer10 = np.array([[-13.791136186415818, -14.492642202393116, -14.492642202393116, -11.297414376071373, -11.297414376071373, -14.896877328439961, -14.896877328439961, -15.399503946725643], [-5.010995299184476, -4.913882469630286, -4.913882469630286, -5.096202317265704, -5.096202317265704, -6.502411157513072, -6.502411157513072, -8.200172485508952]]) #Drawer force when objects were placed inside. Stops before fully open.

drawer11 = np.array([[-12.899881743881659, -13.20181284097621, -13.79981072509022, -10.402762332786837, -11.998932091728134, -13.004819782210818, -13.004819782210818, -11.098928934263025, -11.098928934263025, -12.197254500802325, -11.593666120225492, -11.593666120225492, -11.697381804373283, -11.69160453423168, -11.69160453423168, -10.79410495380131, -10.79410495380131, -9.190522416793451, -9.190522416793451, -11.886950314612372, -11.886950314612372, -8.402774930978074, -8.402774930978074, -8.402774930978074], [-4.300195597836277, -5.799141334927872, -5.803127573053361, -6.297467598873612, -7.5004036349645204, -8.795154373793885, -8.795154373793885, -9.200307880747248, -9.200307880747248, -10.001982298219106, -10.503413585793684, -10.503413585793684, -10.402766732133307, -9.805658546321453, -9.805658546321453, -9.100737196767085, -9.100737196767085, -8.10358568672617, -8.10358568672617, -9.905255546207503, -9.905255546207503, -6.898573571608884, -6.898573571608884, -6.898573571608884]])

drawer12 = np.array([[-13.800146589011318, -14.204456195727543, -12.509673486537514, -12.800394242716367, -12.899514671348056, -12.899514671348056, -10.899434140971172, -10.899434140971172, -13.095992402768704, -10.800846924987203, -10.800846924987203, -12.893708185420625, -11.199430569219903, -11.199430569219903, -12.992566752750237, -12.992566752750237, -12.992566752750237, -8.694178684983488, -10.894327659557721, -8.190156419124575, -8.190156419124575, -13.510999112865486, -13.510999112865486, -13.510999112865486, -13.510999112865486], [-5.099598453244762, -4.898624210432516, -5.092687749590866, -7.299547214714169, -8.500301939385832, -8.500301939385832, -9.099651293473581, -9.099651293473581, -9.802018294475683, -9.700374991177513, -9.700374991177513, -10.10219222335368, -11.30080802514237, -11.30080802514237, -9.803292361805287, -9.803292361805287, -9.803292361805287, -8.502797610858863, -10.100591958705268, -8.80097177176621, -8.80097177176621, -4.896704389850721, -4.896704389850721, -4.896704389850721, -4.896704389850721]])

drawer13 = np.array([[-16.615236923467425, -16.1399555777675, -16.1399555777675, -16.1399555777675, -16.1399555777675, -16.640574309166656, -16.640574309166656, -16.640574309166656, -16.640574309166656, -16.640574309166656, -16.224945043682748, -16.224945043682748, -16.224945043682748, -16.224945043682748, -16.224945043682748, -16.319184294495486, -16.319184294495486], [-5.208077517854949, -6.1195997380128615, -6.1195997380128615, -6.1195997380128615, -6.1195997380128615, -8.806117930593143, -8.806117930593143, -8.806117930593143, -8.806117930593143, -8.806117930593143, -12.104025608341967, -12.104025608341967, -12.104025608341967, -12.104025608341967, -12.104025608341967, -4.710948910787291, -4.710948910787291]])

drawer14 = np.array([[-19.31034044299309, -13.708462437962195, -15.603547452575404, -15.32467950062122, -15.32467950062122, -13.401598431995577, -13.401598431995577, -13.30495041964824, -13.30495041964824, -13.943889511977437, -13.943889511977437, -13.943889511977437, -12.55611980889381, -12.55611980889381, -7.549245885981271, -7.549245885981271, -11.749260080092773, -11.749260080092773, -11.8791842314473, -11.8791842314473, -16.796704080370844, -16.796704080370844, -16.886472929564654], [-9.077905087400199, -8.689369892448438, -8.59458114020007, -10.067552702155037, -10.067552702155037, -8.998546541351132, -8.998546541351132, -7.894771654672294, -7.894771654672294, -10.910646461599733, -10.910646461599733, -10.910646461599733, -11.238749279457782, -11.238749279457782, -9.125491337465453, -9.125491337465453, -11.654503633517095, -11.654503633517095, -14.417065834701082, -14.417065834701082, -4.9189970868170265, -4.9189970868170265, -4.9285787620254755]])

drawer15 = np.array([[-18.80004683669934, -18.80004683669934, -16.342520792443032, -16.342520792443032, -13.831313477866006, -13.831313477866006, -13.831313477866006, -16.40041057844522, -16.40041057844522, -16.40041057844522, -16.40041057844522, -13.691355245730431, -13.691355245730431, -13.691355245730431, -9.93947188746465, -9.93947188746465, -9.93947188746465, -9.93947188746465, -12.78966798825768, -12.78966798825768, -12.78966798825768, -11.125295442070684, -11.125295442070684, -11.125295442070684], [-8.558017734885606, -8.558017734885606, -8.657579791310711, -8.657579791310711, -9.723765683868384, -9.723765683868384, -9.723765683868384, -11.352295825447278, -11.352295825447278, -11.352295825447278, -11.352295825447278, -13.235008268962057, -13.235008268962057, -13.235008268962057, -13.418733731255372, -13.418733731255372, -13.418733731255372, -13.418733731255372, -14.022105305724962, -14.022105305724962, -14.022105305724962, -9.78566978881109, -9.78566978881109, -9.78566978881109]])

door1 = np.array([[-13.803770655706336, -11.100826757728898, -11.100826757728898, -11.100826757728898, -1.3995339724983877, -1.3995339724983877, -1.3995339724983877, -1.3995339724983877, -9.610792443714846, -9.610792443714846, -9.610792443714846], [-9.916193454494454, -15.515871483756776, -15.515871483756776, -15.515871483756776, -16.609104249341545, -16.609104249341545, -16.609104249341545, -16.609104249341545, -20.719826063070172, -20.719826063070172, -20.719826063070172]])

door2 = np.array([[-0.722643811907015, -0.722643811907015, -0.722643811907015, -0.722643811907015, -6.714969891223776, -6.714969891223776, -6.714969891223776, -6.714969891223776, -6.714969891223776, -6.714969891223776, -6.714969891223776, -6.714969891223776, -6.714969891223776, -6.714969891223776], [-12.277272455599038, -12.277272455599038, -12.277272455599038, -12.277272455599038, -13.863004214790323, -13.863004214790323, -13.863004214790323, -13.863004214790323, -13.863004214790323, -13.863004214790323, -13.863004214790323, -13.863004214790323, -13.863004214790323, -13.863004214790323]])

door3 = np.array([[-6.797591610833895, -6.2481858360017055, -6.2481858360017055, -6.2481858360017055, -6.2481858360017055, -6.2481858360017055, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623, -4.555144351958623], [-3.42957537219874, -14.930357800217097, -14.930357800217097, -14.930357800217097, -14.930357800217097, -14.930357800217097, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569, -15.723325586631569]])

door4 = np.array([[-8.594956908619372, -8.594956908619372, -8.594956908619372, -8.594956908619372, -1.4048376116995438, -1.4048376116995438, -1.4048376116995438, -1.4048376116995438, -8.202957633107136, -8.202957633107136, -8.202957633107136, -8.202957633107136, -8.202957633107136, -8.202957633107136, -8.202957633107136, -8.202957633107136, -8.202957633107136], [-14.518971856538391, -14.518971856538391, -14.518971856538391, -14.518971856538391, -11.829283923626871, -11.829283923626871, -11.829283923626871, -11.829283923626871, -8.032467472079766, -8.032467472079766, -8.032467472079766, -8.032467472079766, -8.032467472079766, -8.032467472079766, -8.032467472079766, -8.032467472079766, -8.032467472079766]])

door5 = np.array([[-8.418619783654988, -4.121893229454497, -2.6063767109743776, -2.6063767109743776, -2.209969948542042, -2.0086880310394095, -2.9142522352079183, -2.9142522352079183, -8.213709891924205, -8.801473588023589, -8.801473588023589, -8.801473588023589, -8.801473588023589, -7.79257518900875, -7.79257518900875, -7.79257518900875, -7.79257518900875], [-12.704737833446009, -13.008908827563598, -11.626228057866337, -11.626228057866337, -12.322621239591495, -10.632873038194921, -11.466798069759392, -11.466798069759392, -10.407896017765717, -9.121807352024947, -9.121807352024947, -9.121807352024947, -9.121807352024947, -6.628105559839081, -6.628105559839081, -6.628105559839081, -6.628105559839081]])

door6 = np.array([[-8.59884865986229, -7.904103962650531, -7.904103962650531, -1.6017669046309166, -0.8010805935513984, -0.8010805935513984, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417, 1.7960786271817417], [-1.8187127574805635, -1.8149559760321488, -1.8149559760321488, -0.222318138485717, 1.9855148650443175, 1.9855148650443175, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743, 3.971175013938743]])

door7 = np.array([[-12.615343294474531, -11.20636959322953, -11.20636959322953, 1.0882039125902312, 1.0882039125902312, 1.2864803260867643, 1.2864803260867643, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013, 3.0842178123472013], [-0.31749698363405277, 0.18461116463307362, 0.18461116463307362, 2.0802615140359353, 2.0802615140359353, 6.675466054009972, 6.675466054009972, 11.47768694160312, 11.47768694160312, 11.47768694160312, 11.47768694160312, 11.47768694160312, 11.47768694160312, 11.47768694160312, 11.47768694160312, 11.47768694160312, 11.47768694160312]])

door8 = np.array([[-18.6008832108451, -18.6008832108451, -3.3964217033210398, -3.3964217033210398, 14.001177245888917, 14.001177245888917, 14.001177245888917, 13.907737067835273, 13.907737067835273, 13.907737067835273, 13.907737067835273, 13.907737067835273, 13.907737067835273, 13.907737067835273, 13.907737067835273, 13.907737067835273, 13.907737067835273], [-9.984942063355035, -9.984942063355035, -5.700026070800886, -5.700026070800886, -1.6169805955044336, -1.6169805955044336, -1.6169805955044336, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758, -2.7035315652214758]])

door9 = np.array([[-9.205367236349527, -9.205367236349527, -2.801796524275516, -2.801796524275516, -2.801796524275516, -0.21192446882490665, -0.21192446882490665, -0.21192446882490665, 2.2835665062398336, 2.2835665062398336, 2.2835665062398336, 11.00180323868588, 11.00180323868588, 11.00180323868588, -9.30354340185975, -9.30354340185975, -9.30354340185975], [-2.01552994732683, -2.01552994732683, -0.019449855753503078, -0.019449855753503078, -0.019449855753503078, 5.2734484309122385, 5.2734484309122385, 5.2734484309122385, 7.66674840773988, 7.66674840773988, 7.66674840773988, 8.486088461818133, 8.486088461818133, 8.486088461818133, -1.1208779828011015, -1.1208779828011015, -1.1208779828011015]])

door10 = np.array([[-9.287762083644907, -8.428520975548667, -8.428520975548667, -8.428520975548667, -8.428520975548667, -0.805235328469946, -0.805235328469946, -0.805235328469946, -0.805235328469946, 4.166585691065012, 4.166585691065012, 4.166585691065012, -8.151629018240447, -8.151629018240447, -8.151629018240447, -8.151629018240447, -8.151629018240447], [-2.6923478937538845, -1.271566314398598, -1.271566314398598, -1.271566314398598, -1.271566314398598, 4.158187197005069, 4.158187197005069, 4.158187197005069, 4.158187197005069, 11.324322857039979, 11.324322857039979, 11.324322857039979, -4.162034164802341, -4.162034164802341, -4.162034164802341, -4.162034164802341, -4.162034164802341]])

# without door grasping door11
door11 = np.array([[-9.298684165265463, -9.906292051690839, -9.906292051690839, -9.906292051690839, -9.906292051690839, -9.906292051690839, -8.188918585762213, -8.188918585762213, -8.188918585762213, -8.188918585762213, -8.188918585762213, -8.579829712386351, -8.579829712386351, -8.579829712386351, -8.579829712386351, -8.579829712386351, -8.579829712386351], [-2.3924485977787584, -3.515422014743015, -3.515422014743015, -3.515422014743015, -3.515422014743015, -3.515422014743015, -3.173886003670634, -3.173886003670634, -3.173886003670634, -3.173886003670634, -3.173886003670634, -2.6632580038844424, -2.6632580038844424, -2.6632580038844424, -2.6632580038844424, -2.6632580038844424, -2.6632580038844424]])

door12 = np.array([[-10.999799973990507, -10.999799973990507, -10.999799973990507, -1.3073183173986764, -1.3073183173986764, -1.3073183173986764, -1.3073183173986764, -1.3073183173986764, 3.191880668415929, 3.191880668415929, 3.191880668415929, 3.191880668415929, 3.191880668415929, 3.191880668415929, 3.191880668415929, 3.191880668415929, 3.191880668415929], [0.5854936743984867, 0.5854936743984867, 0.5854936743984867, 0.5706959242552118, 0.5706959242552118, 0.5706959242552118, 0.5706959242552118, 0.5706959242552118, 3.3540917518567444, 3.3540917518567444, 3.3540917518567444, 3.3540917518567444, 3.3540917518567444, 3.3540917518567444, 3.3540917518567444, 3.3540917518567444, 3.3540917518567444]])

door13 = np.array([[-14.694613829394486, -14.694613829394486, -14.694613829394486, -14.694613829394486, -14.694613829394486, -2.396218499100861, -2.396218499100861, -2.396218499100861, -2.396218499100861, -2.396218499100861, -2.396218499100861, 16.493835082949975], [-0.8274129762620065, -0.8274129762620065, -0.8274129762620065, -0.8274129762620065, -0.8274129762620065, 4.354312618207594, 4.354312618207594, 4.354312618207594, 4.354312618207594, 4.354312618207594, 4.354312618207594, 14.068719555784487]])

door14 = np.array([[-11.6840342660437, -11.665833180551097, -5.086749055257596, -3.459872494442731, -3.459872494442731, -2.697813334684238, -2.697813334684238, -3.2588756278938518, -3.2588756278938518, -1.8648975387710902, 6.232174168978776, 19.018185857406817, 19.018185857406817, 19.904663620676192, 1.0009780010002138, 1.0009780010002138, -11.185169248098244], [-4.716271759933229, -4.601870858029004, -0.807952957986517, 0.28715216153772594, 0.28715216153772594, 2.189279117596517, 2.189279117596517, 3.4727690313767807, 3.4727690313767807, 8.773451673086418, 11.862874705712452, 19.352719402323956, 19.352719402323956, 11.770397504232276, 3.9847060912762444, 3.9847060912762444, -3.510532802713948]])

door15 = np.array([[-4.700543803035129, -4.700543803035129, -2.4995099848586726, -2.4995099848586726, -2.4995099848586726, -2.608171803474144, -2.608171803474144, -2.608171803474144, 0.0026104625272087537, 0.0026104625272087537, 11.599306215353709, 11.599306215353709, 11.599306215353709, 1.8136109286238524, 1.8136109286238524], [1.5940084263786614, 1.5940084263786614, 2.8520610428432565, 2.8520610428432565, 2.8520610428432565, 2.7790568589464004, 2.7790568589464004, 2.7790568589464004, 5.45852397898423, 5.45852397898423, 9.86766050577126, 9.86766050577126, 9.86766050577126, 2.139166029699813, 2.139166029699813]])

door16 = np.array([[-12.505374620450265, -12.505374620450265, -5.900811659522822, -5.900811659522822, -5.900811659522822, -4.208313595690661, -4.208313595690661, -4.208313595690661, -3.901803187346414, -3.901803187346414, -3.901803187346414, -0.9062899097864757, 19.994223803815473, 19.994223803815473, 19.994223803815473, 0.18807815274452294, 0.18807815274452294], [-1.2256437772641335, -1.2256437772641335, 1.3944891409012068, 1.3944891409012068, 1.3944891409012068, 1.357405462506746, 1.357405462506746, 1.357405462506746, 1.966902597722927, 1.966902597722927, 1.966902597722927, 4.961935798953702, 16.179890092901598, 16.179890092901598, 16.179890092901598, 1.3196270989042491, 1.3196270989042491]])

door17 = np.array([[-13.901844728361763, -13.901844728361763, -7.000846487012051, -7.000846487012051, -7.000846487012051, -3.9000619601954134, -3.9000619601954134, -3.9000619601954134, -2.600955382332734, -2.600955382332734, -2.600955382332734, 2.396237691557134, 2.396237691557134, 2.396237691557134, 12.59435760273437, 12.59435760273437, 12.59435760273437], [-0.5114298670646297, -0.5114298670646297, -0.1154579442858919, -0.1154579442858919, -0.1154579442858919, 1.2509283653035357, 1.2509283653035357, 1.2509283653035357, 2.9513370843438285, 2.9513370843438285, 2.9513370843438285, 5.166987036392557, 5.166987036392557, 5.166987036392557, 6.58558090369866, 6.58558090369866, 6.58558090369866]])

door18 = np.array([[-11.807519714789354, -9.99650401133076, -9.99650401133076, -9.99650401133076, -9.99650401133076, -2.9006686041327487, -2.9006686041327487, -2.9006686041327487, -2.9006686041327487, 7.789273013639099, 7.789273013639099, 7.789273013639099, 7.789273013639099, 7.789273013639099, 7.789273013639099, 7.789273013639099, 7.789273013639099], [-1.9197059414758488, 5.663678914771017, 5.663678914771017, 5.663678914771017, 5.663678914771017, 8.56851423435409, 8.56851423435409, 8.56851423435409, 8.56851423435409, 15.379788658748645, 15.379788658748645, 15.379788658748645, 15.379788658748645, 15.379788658748645, 15.379788658748645, 15.379788658748645, 15.379788658748645]])

door19 = np.array([[-12.538457851791666, -12.538457851791666, -5.79185564066136, -5.79185564066136, -5.79185564066136, -5.79185564066136, -5.79185564066136, -5.187928196330076, -5.187928196330076, -5.187928196330076, -5.187928196330076, -5.187928196330076, 13.354310978224417, 13.354310978224417, 13.354310978224417, -10.72491471182112, -10.72491471182112], [0.5251701130678483, 0.5251701130678483, -0.6868042654079175, -0.6868042654079175, -0.6868042654079175, -0.6868042654079175, -0.6868042654079175, 0.6412489013973814, 0.6412489013973814, 0.6412489013973814, 0.6412489013973814, 0.6412489013973814, 12.50241223001637, 12.50241223001637, 12.50241223001637, -1.8601859043087712, -1.8601859043087712]])

door20 = np.array([[-12.29812566529585, -11.800560035960611, -11.800560035960611, -11.800560035960611, -2.510500546862167, -2.510500546862167, -2.510500546862167, -2.510500546862167, -2.510500546862167, -2.510500546862167, -0.6017005973522138, -0.6017005973522138, -0.6017005973522138, -0.6017005973522138, -13.597796326064184, -13.597796326064184, -13.597796326064184], [-1.5185425930692829, 0.0778815798509815, 0.0778815798509815, 0.0778815798509815, 1.848414802232449, 1.848414802232449, 1.848414802232449, 1.848414802232449, 1.848414802232449, 1.848414802232449, 8.166743619973232, 8.166743619973232, 8.166743619973232, 8.166743619973232, -1.5261246964912947, -1.5261246964912947, -1.5261246964912947]])


czx = []
czx.append(drawer1[0, ::])
czx.append(drawer2[0, ::])
czx.append(drawer3[0, ::])
czx.append(drawer4[0, ::])
czx.append(drawer5[0, ::])
czx.append(drawer6[0, ::])
czx.append(drawer7[0, ::])
czx.append(drawer8[0, ::])
czx.append(drawer9[0, ::])
czx.append(drawer10[0, ::])
czx.append(drawer11[0, ::])
czx.append(drawer12[0, ::])
czx.append(drawer13[0, ::])
czx.append(drawer14[0, ::])
czx.append(drawer15[0, ::])
czy = []
czy.append(drawer1[1, ::])
czy.append(drawer2[1, ::])
czy.append(drawer3[1, ::])
czy.append(drawer4[1, ::])
czy.append(drawer5[1, ::])
czy.append(drawer6[1, ::])
czy.append(drawer7[1, ::])
czy.append(drawer8[1, ::])
czy.append(drawer9[1, ::])
czy.append(drawer10[1, ::])
czy.append(drawer11[1, ::])
czy.append(drawer12[1, ::])
czy.append(drawer13[1, ::])
czy.append(drawer14[1, ::])
czy.append(drawer15[1, ::])
czex = []
czex.append(door1[0, ::])
czex.append(door2[0, ::])
czex.append(door3[0, ::])
czex.append(door4[0, ::])
czex.append(door5[0, ::])
czex.append(door6[0, ::])
czex.append(door7[0, ::])
czex.append(door8[0, ::])
czex.append(door9[0, ::])
czex.append(door10[0, ::])
czex.append(door11[0, ::])
czex.append(door12[0, ::])
czex.append(door13[0, ::])
czex.append(door14[0, ::])
czex.append(door15[0, ::])
czex.append(door16[0, ::])
czex.append(door17[0, ::])
czex.append(door18[0, ::])
czex.append(door19[0, ::])
czex.append(door20[0, ::])
czey = []
czey.append(door1[1, ::])
czey.append(door2[1, ::])
czey.append(door3[1, ::])
czey.append(door4[1, ::])
czey.append(door5[1, ::])
czey.append(door6[1, ::])
czey.append(door7[1, ::])
czey.append(door8[1, ::])
czey.append(door9[1, ::])
czey.append(door10[1, ::])
czey.append(door11[1, ::])
czey.append(door12[1, ::])
czey.append(door13[1, ::])
czey.append(door14[1, ::])
czey.append(door15[1, ::])
czey.append(door16[1, ::])
czey.append(door17[1, ::])
czey.append(door18[1, ::])
czey.append(door19[1, ::])
czey.append(door20[1, ::])

czx = np.array(czx)
czex = np.array(czex)
czy = np.array(czy)
czey = np.array(czey)
vm = np.array([[1,1,1], [1,2,3], [1,4,9]])
vminv = np.linalg.pinv(vm).T
cdraw = np.zeros([30, 3])
cdoor = np.zeros([30, 3])
data = np.zeros([60, 3])
cdraw[0] = np.matmul(vminv, czx[0][0:3])
# print(cdraw[0])

for i in range(20):
    try:
        cdraw[i] = np.matmul(vminv, czx[i][0:3])
        plt.scatter(cdraw[i, 0], cdraw[i, 1], c="r")
        cdraw[i+15] = np.matmul(vminv, czy[i][0:3])
        plt.scatter(cdraw[i+15, 0], cdraw[i+15, 1], c="g")
    except:
        pass
    try:
        cdoor[i] = np.matmul(vminv, czex[i][0:3])
        plt.scatter(cdoor[i, 0], cdoor[i, 1], c="k")
        cdoor[i+15] = np.matmul(vminv, czey[i][0:3])
        plt.scatter(cdoor[i+15, 0], cdoor[i+15, 1], c="b")
    except:
        pass
plt.show()

# norx = np.zeros([30, 3])
# norx[:15, :] = cdoor[:15, :]
# norx[15:, :] = cdraw[:15, :]
# nory = np.zeros([30, 3])
# nory[:15, :] = cdoor[15:, :]
# nory[15:, :] = cdraw[15:, :]
# norx = norx / np.linalg.norm(norx)
# nory = nory / np.linalg.norm(nory)
# # print(norx)
# # print(nory)
# data[:15, :] = norx[:15, :]
# data[15:30, :] = nory[:15, :]
# data[30:45, :] = norx[15:, :]
# data[45:, :] = nory[15:, :]
# labeldraw = np.ones(30)
# label = np.zeros(60)
# label[:30] = labeldraw
# # print(data)
#
# x_train, x_test, y_train, y_test = train_test_split(data, label, test_size=0.1, random_state=7)
# # print(x_train)
# # print(y_train)
# # print(x_test)
# # print(y_test)
# model = SVC(C=1)
# svvc = model.fit(x_train, y_train)
# acc = model.score(x_test, y_test)
# scores = cross_val_score(model, data, label, cv=5)
# print(scores)
#
# print(svvc)
# print(acc)
# print(model.predict(x_test))
#
# rf = RandomForestClassifier()
# rffm = rf.fit(x_train, y_train)
# accm = rf.score(x_test, y_test)
#
# print(rffm)
# print(accm)
# print(rf.predict(x_test))
